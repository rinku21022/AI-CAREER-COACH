generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
  
}

model User {
  id             String   @id @default(cuid())
  clerkUserId    String   @unique
  email          String   @unique
  firstName      String?
  lastName       String?
  imageUrl       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Career information
  industry       String?
  experienceLevel String?
  skills         Skill[]
  skillsString   String?
  
  // User assessments and progress
  assessments    Assessment[]
  resumes        Resume[]
  coverLetters   CoverLetter[]
  
  @@map("users")
}

model Skill {
  id     String @id @default(cuid())
  name   String
  level  String // beginner, intermediate, advanced
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("skills")
}

model Assessment {
  id          String   @id @default(cuid())
  userId      String
  type        String   // quiz, interview, etc.
  score       Int?
  totalQuestions Int?
  correctAnswers Int?
  results     Json?    // Store detailed results
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("assessments")
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  content   String
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("resumes")
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("cover_letters")
}

model IndustryInsight {
  id                       String   @id @default(cuid())
  industry                 String   @unique
  salaryRangesJson         String
  growthRate              Float
  demandLevel             String
  topSkillsString         String
  marketOutlook           String
  keyTrendsString         String
  recommendedSkillsString String
  lastUpdated             DateTime @default(now())
  nextUpdate              DateTime
  
  @@map("industry_insights")
}